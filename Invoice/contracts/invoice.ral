import "invoice_interface.ral"

Contract Invoice(
  payTo: Address,
  paymentAttoAlphAmount: U256,
  paymentDueAt: U256,
  mut paid: Bool,
  mut paidAt: U256,
  receiptOwner: Address,
  nonce: ByteVec
) implements InvoiceInterface {
  @using(preapprovedAssets = true, assetsInContract = true)
  pub fn pay() -> (U256) {
    // Cannot handle multiple transactions simultaneously paying.
    //assert!(txInputsSize!() == 1, 0)

    // If it's already paid then do nothing.
    assert!(paid == false, 0)
    
    let     amountApprovedToReceive = alphRemaining!(callerAddress!())

    // Needs sub 1 alph since that's the "storage deposit" to prevent network spam
    let     amountPaid              = alphRemaining!(selfAddress!()) - 1 alph

    let     paymentRemaining        = paymentAttoAlphAmount - amountPaid
    let mut amountToTransferToSelf  = 0

    if (amountApprovedToReceive <= paymentRemaining) {
      amountToTransferToSelf = amountApprovedToReceive
      transferAlphToSelf!(callerAddress!(), amountToTransferToSelf)
    } else {
      amountToTransferToSelf = paymentRemaining
      transferAlphToSelf!(callerAddress!(), amountToTransferToSelf)
    }

    let paymentRemainingAfterPaying = paymentAttoAlphAmount - (amountPaid + amountToTransferToSelf)
    let isExactlyPaid               = paymentRemainingAfterPaying == 0

    if (isExactlyPaid) {
      paidAt = blockTimeStamp!()
      paid = true
      return 0
    }

    return paymentRemainingAfterPaying
  }

  pub fn collect() -> () {
    assert!(paid == true, 0)
    approveAlph!(selfAddress!(), paymentAttoAlphAmount) 
    transferAlphFromSelf!(payTo, paymentAttoAlphAmount)
  }

  pub fn destroy() -> () {
    // Only the payment receiver can destroy the invoice.
    // The payment receiver may be a contract or user.
    assert!(callerAddress!() == payTo, 0)

    // If it's already paid then we must keep the proof
    assert!(paid == false, 0)

    // Return the contract balance to the payment receiver.
    // There should only be the initial contract deposit that remains.
    destroySelf!(payTo)
  }
}
