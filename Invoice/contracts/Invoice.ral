Contract Invoice(
  payTo: Address,
  paymentAttoAlphAmount: U256,
  paymentDueAt: U256,
  mut paid: Bool,
  mut paidAt: U256,
  receiptOwner: Address,
  identifier: ByteVec
) {
  @using(preapprovedAssets = true, assetsInContract = true)
  pub fn pay() -> () {
    // Cannot handle multiple transactions simultaneously paying.
    assert!(txInputsSize!() == 1, 0)

    // If it's already paid then do nothing.
    assert!(paid == false, 0)
    
    let     amountApprovedToReceive = alphRemaining!(callerAddress!())
    let     amountPaid              = alphRemaining!(selfAddress!())
    let     paymentRemaining        = paymentAttoAlphAmount - amountPaid
    let mut amountToTransferToSelf  = 0

    if (amountApprovedToReceive <= paymentRemaining) {
      amountToTransferToSelf = amountApprovedToReceive
      transferAlphToSelf!(callerAddress!(), amountToTransferToSelf)
    } else {
      amountToTransferToSelf = paymentRemaining
      transferAlphToSelf!(callerAddress!(), amountToTransferToSelf)
    }

    let paymentRemainingAfterPaying = paymentAttoAlphAmount - (amountPaid + amountToTransferToSelf)
    let isExactlyPaid               = paymentRemainingAfterPaying == 0

    if (isExactlyPaid) {
      approveAlph!(selfAddress!(), paymentAttoAlphAmount) 
      transferAlphFromSelf!(payTo, paymentAttoAlphAmount)
      paidAt = blockTimeStamp!()
      paid = true
    } else { }
  }

  pub fn destroy() -> () {
    // Only the payment receiver can destroy the invoice.
    // The payment receiver may be a contract or user.
    assert!(callerAddress!() == payTo, 0)

    // If it's already paid then we must keep the proof
    assert!(paid == false, 0)

    // Return the contract balance to the payment receiver.
    // There should only be the initial contract deposit that remains.
    destroySelf!(payTo)
  }
}
